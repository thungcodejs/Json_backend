const {Dish} = require('../models/dish');const { Category } = require('../models/category');const express = require('express');const router = express.Router();const mongoose = require('mongoose');router.get(`/`, async (req, res) => {    const dishList = await Dish.find().populate('category');    if(!dishList) {        res.status(500).json({success: false})    }    res.send(dishList);})router.get('/:id', async (req, res) => {    const dish = await Dish.findById(req.params.id).populate('category');    if(!dish) {        res.status(500).json({success: false})    }    res.send(dish);})router.post(`/`,    async (req, res) => {        const category = await Category.findById(req.body.category);        if (!category) return res.status(400).send('Invalid Category');        let dish = new Dish({            name: req.body.name,            description: req.body.description,            richDescription: req.body.richDescription,            image: req.body.image,            price: req.body.price,            category: req.body.category,            rating: req.body.rating,            numReviews: req.body.numReviews,            isFeatured: req.body.isFeatured        })        dish = await dish.save();        if (!dish) {            return res.status(500).send('The dish cannot be create!');        }        res.send(dish);    });router.put('/:id', async (req, res) => {    if(!mongoose.isValidObjectId(req.params.id)) {        res.status(400).send('Invalid product id')    }    const category = await Category.findById(req.body.category);    if (!category) return res.status(400).send('Invalid Category');    const dish = await Dish.findByIdAndUpdate(        req.params.id,        {            name: req.body.name,            description: req.body.description,            richDescription: req.body.richDescription,            image: req.body.image,            price: req.body.price,            category: req.body.category,            rating: req.body.rating,            numReviews: req.body.numReviews,            isFeatured: req.body.isFeatured        },        { new: true } //du lieu se duoc cap nhat moi    )    if(!dish) {        res.status(400).send('the dish cannot be create!')    }    res.send(dish);})router.delete('/:id', (req, res) => {    Dish.findByIdAndRemove(req.params.id).then(dish => {        if(dish) {            return res.status(202).json({success: true, message: 'the category is delete!'})        } else {            return res.status(404).json({success: false, message: 'category not found!'})        }    }).catch(err => {        return res.status(404).json({success: false, error: err})    })})module.exports = router;